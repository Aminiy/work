激活流程

registeruserbytoken
	ACP--构造request--UCC--setToken
		deviceid 		// 存储到userInfo中  DeviceID字段;
		token  			// 存储到userInfo中  DToken字段;  ACP 生成的一个 UUID， CinConvert.hextoBytes(token);
		Password		// 存储到userInfo中  DPassword字段; Cinconvert(dbPassword); dbPassword = md5encode3(randomstr);

		用token作为encrypt_key的值 存在ucc的userinfo中，做消息加密解密用---每个infobody都有各自的encrypt_key
		token, password 存储到userinfo中  同时下发给客户端一份
	response ACP-返回给客户端
		token
		password
		From

1. 客户端和server建立连接
	
2. challenge--CMP直接返回
		userProxy.setUserId(), setLanguage(), setPid()  此处根据客户端ip,port,token生成pid设置到userProxy里

		response
			randomKey
3. logon
	--->经过CMP时候，CMP进行一次包装--然后再分发请求到UCC
		request中追加FROM，MobileNo,Fpid,ServerData,Languge,clientversion,clientip,callId

	CMP收到UCC的OK应答
		userProxy中设置logonTime,setAuthorized,setMobileNo,setEncrypt_key
	给客户端返回response

	request
		from
		clienttype
		clientversion
		devicetoken   // devicetoken+userid=deviceid
		Fpid 			// save到userinfo中
	response
		expire 			// logon expire 5minutes
		credential 		
		credentialexpire
		MobileNo
		ServerData 		// encrypt_key

	Logon 生成一个UUID作为credential， 存储到userinfo中，并返回给客户端
3. checkCredentail
	CMP:将客户端上传的各种header值赋值到userPorxy的userinfo属性中(clienttype,clientversion,oem,clientAbility,lv,userId,pid)
	-->同Logon一样追加一堆header，然后再分发请求到UCC
	比对credential, 相等后，再生成一个新的credential，存储到UCC的userinfo中
	response
		将expire,credential，dateTime,encrypt_key下发给客户端

4. keepAlive
	-->同Logon一样追加一堆header，然后再分发请求到UCC
	主要是维护用户状态，前段在线后端在线，等信息
	response
		keepAlive超时时间
5. SendMessage
	-->经过CMP时，追加一堆header（From, MobileNo, Fpid, ServerData, Language,clientVersion, clientIP, CallId）

	response
		透传MSC返回的数据给客户端
